{"version":3,"file":"index.mjs","sources":["../src/index.js"],"sourcesContent":["import React, { useState, useContext } from 'react'\nimport {\n  useHistory\n} from 'react-router-dom'\n/**\n * @typedef UserInfoType\n * @type {object}\n * @property {string | number} id - an ID.\n * @property {string} name - your name.\n * @property {string} [profileImage] - profile image.\n */\n\n/**\n * @typedef AuthContextType\n * @type {object}\n * @property {UserInfoType} [user]\n * @property {Function} [onForbidden]\n * @property {Function} [login]\n * @property {Function} [register]\n * @property {Function} [getUserInfo]\n * @property {Function} [logout]\n */\n\n/**\n * @type {React.Context<AuthContextType>}\n */\nconst Context = React.createContext({});\nexport const AuthProvider = ({\n  children,\n  forbiddenPath = '/forbidden',\n  client = {\n    login: (payload) => Promise.resolve(),\n    register: (payload) => Promise.resolve(),\n    getUserInfo: (payload) => Promise.resolve({\n      id: 1,\n      name: 'Mock'\n    }),\n    logout: (payload) => Promise.resolve()\n  }\n}) => {\n  /**\n   * @type [UserInfoType, React.Dispatch<UserInfoType>]\n   */\n  const [user, setuser] = useState()\n  // const history = useHistory()\n  const history = useHistory()\n  const contextValue = {\n    user,\n    onForbidden: () => history.push(forbiddenPath),\n    ...client,\n    login: async () => {\n      await client.login()\n      const user = await client.getUserInfo()\n      setuser(user)\n    },\n    logout: async () => {\n      await client.logout()\n      setuser(null)\n    }\n  }\n  return (\n    <Context.Provider value={contextValue}>\n      {children}\n    </Context.Provider>\n  )\n}\n\nexport const useAuth = () => {\n  const context = useContext(Context)\n  if (!context) {\n    throw new Error('useAuth should be use in side auth context')\n  }\n  return context;\n}\n/**\n * \n * @param {function} forbiddenCb \n */\nexport const useAuthenticated = (forbiddenCb) => {\n  const {\n    user,\n    onForbidden\n  } = useAuth()\n  if (!user) {\n    forbiddenCb ? forbiddenCb() : onForbidden()\n  }\n}"],"names":["const","Context","React","createContext","AuthProvider","ref","login","payload","Promise","resolve","register","getUserInfo","id","name","logout","useState","history","useHistory","contextValue","Object","user","onForbidden","push","forbiddenPath","client","setuser","Provider","value","children","useAuth","context","useContext","Error","useAuthenticated","forbiddenCb"],"mappings":"kGA0BAA,IAAMC,EAAUC,EAAMC,cAAc,IACvBC,WAAgBC,qDAEX,4CACP,CACPC,eAAQC,UAAYC,QAAQC,WAC5BC,kBAAWH,UAAYC,QAAQC,WAC/BE,qBAAcJ,UAAYC,QAAQC,QAAQ,CACxCG,GAAI,EACJC,KAAM,UAERC,gBAASP,UAAYC,QAAQC,mBAMPM,kBAElBC,EAAUC,IACVC,EAAeC,uBACnBC,EACAC,8BAAmBL,EAAQM,KAAKC,KAC7BC,GACHlB,4CACQkB,EAAOlB,gDACMkB,EAAOb,6BAApBS,GACNK,EAAQL,2CAEVN,6CACQU,EAAOV,0BACbW,EAAQ,qDAIVvB,gBAACD,EAAQyB,UAASC,MAAOT,GACtBU,IAKMC,iBACLC,EAAUC,EAAW9B,OACtB6B,QACG,IAAIE,MAAM,qDAEXF,GAMIG,WAAoBC,SAI3BL,6BAEFK,EAAcA,IAAgBb"}